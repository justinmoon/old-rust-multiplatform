import Counter
import SwiftUI

// NOTE: This code relies on types generated by UniFFI from the Rust code.
// Before using this updated code, you need to:
// 1. Build the Rust library with 'cargo build'
// 2. Generate the Swift bindings with the UniFFI command line tool
// 3. Make sure the generated bindings are included in your Xcode project

@Observable class ViewModel: FfiUpdater {
    var rust: FfiApp
    let db = Database()
    var count: String
    var currentRoute: Route?
    var router: Router

    // Computed property to provide array of routes for SwiftUI NavigationStack
    var navigationPath: [Route] {
        return router.routes
    }

    public init() {
        let documentsPath = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)
            .first!.absoluteString
        let rust = FfiApp(dataDir: documentsPath)

        self.count = db.getCounter()
        self.rust = rust
        self.currentRoute = rust.getCurrentRoute()
        self.router = rust.getRouter()

        self.rust.listenForUpdates(updater: self)
    }

    func update(update: Update) {
        switch update {
        case .databaseUpdate:
            self.count = db.getCounter()
            self.currentRoute = rust.getCurrentRoute()
            self.router = rust.getRouter()
        }
    }

    // Helper function to get the current route
    func getCurrentRoute() -> Route {
        return currentRoute ?? .home
    }

    public func dispatch(event: Event) {
        self.rust.dispatch(event: event)
    }

    // Additional state
    var isSuccessScreenShown: Bool = false
}
